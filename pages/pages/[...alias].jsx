import { NextSeo } from 'next-seo';
import { getPreview } from '../../lib/getPreview';
import RenderComponents from '../../components/render-components/render-components';
import Layout from '../../components/layout';
import { getPagesApi } from '../api/pages';
export default function PageTemplate({
	page,
	mainMenu,
	footerMenu,
	footerContent,
	isiContent,
	hrefLang,
	preview,
}) {
	const components = page.field_components;
	function buildMenuHierarchy(menuItems) {
		// This function converts the flat list into a tree structure based on the 'parent' attribute.
		let menuTree = [];
		let menuMap = {};

		// First, transform the list into a map for easy lookup.
		menuItems.forEach((item) => {
			menuMap[item.id] = { ...item, children: [] };
		});

		// Then, build the tree by adding children to their respective parents.
		menuItems.forEach((item) => {
			if (item.parent) {
				// The parent ID is not empty, add this item to its parent's 'children' array.
				if (menuMap[item.parent]) {
					menuMap[item.parent].children.push(menuMap[item.id]);
				}
			} else {
				// This is a root item (no parent).
				menuTree.push(menuMap[item.id]);
			}
		});

		return menuTree;
	}
	buildMenuHierarchy(mainMenu);
	return (
		<Layout
			preview={preview}
			mainMenu={mainMenu}
			footerContent={footerContent}
			footerMenu={footerMenu}
			isiContent={isiContent}
		>
			<NextSeo
				title="Decoupled Next Drupal Demo"
				description="Generated by create-pantheon-decoupled-kit."
				languageAlternates={hrefLang}
			/>
			<RenderComponents components={components} />
		</Layout>
	);
}

export async function getServerSideProps(context) {
	const alias = `${context.params.alias
		.map((segment) => `/${segment}`)
		.join('')}`;
	const previewParams =
		context.preview && (await getPreview(context, 'node--page', params));

	if (previewParams?.error) {
		return {
			redirect: {
				destination: previewParams.redirect,
				permanent: false,
			},
		};
	}

	const props = await getPagesApi({ context, alias });
	return {
		props: {
			...props,
			preview: Boolean(context.preview),
		},
	};
}
